clustering {
  system = FraudCheckerCluster
  mysql-ip = "127.0.0.1"
  mysql-ip = ${?MYSQL_IP}
}

akka {
  loglevel = "INFO"
  log-dead-letters = on

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serialize-creators = on
    serialize-messages = on
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?THIS_IP}  //In Kubernetes, this is env var represents Pod's IP as in deployment.yaml
      port = 0
      port = ${?CLUSTER_PORT} //In Kubernetes, this is specified as the contaienr port
    }
  }

  cluster {
    //In Kubenetes, seed-nodes to be overwritten by scala code in NetworkConfig object
    seed-nodes = [
      "akka.tcp://"${clustering.system}"@127.0.0.1:2551",
      "akka.tcp://"${clustering.system}"@127.0.0.1:2552"]
    auto-down-unreachable-after = 120s
  }

  persistence {
    publish-plugin-commands = on

    journal {
      plugin = "akka-persistence-sql-async.journal"
    }

    snapshot-store {
      plugin = "akka-persistence-sql-async.snapshot-store"
    }
  }
}

akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

  user = "root"
  password = ""
  password = ${?CLOUD_SQL_PASSWORD}

  url = "jdbc:mysql://"${clustering.mysql-ip}":3306/assignment"
  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "metadata_table"
  journal-table-name = "journal_table"
  snapshot-table-name = "snapshot_table"
}
